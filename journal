#!/bin/bash

MODE="$1"
DATE="${2:-$(date +%F)}"
YEAR=$(date +%Y -d "$DATE")
MONTH=$(date +%m -d "$DATE")
DIR=~/journal/$YEAR/$MONTH
FILE="$DIR/$DATE.md"
ENC_FILE="$FILE.gpg"
TEMP_ENC_FILE="$FILE.new.gpg"
REMOTE_HOST=${JOURNAL_REMOTE:-gdrive:journal}
REMOTE_PATH="$REMOTE_HOST/$YEAR/$MONTH/$DATE.md.gpg"
IMG_DIR="$DIR/images"
PREVIEW_BASE=~/Documents/.journal-preview
PREVIEW_DIR="$PREVIEW_BASE/$DATE"

mkdir -p "$DIR"

case "$MODE" in
    attach)
        # If next arg looks like a date, use it
        if [[ "${2:-}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            DATE="$2"
            shift 2
        else
            DATE="$(date +%F)"
            shift 1
        fi

        if [ "$#" -eq 0 ]; then
            echo "‚ùå No images provided to attach."
            exit 1
        fi

        YEAR=$(date +%Y -d "$DATE")
        MONTH=$(date +%m -d "$DATE")
        DIR=~/journal/$YEAR/$MONTH
        mkdir -p "$IMG_DIR"

        for img in "$@"; do
            BASENAME="$DATE-$(basename "$img")"
            TARGET="$IMG_DIR/$BASENAME"
            echo "üìé Attaching $img ‚Üí $TARGET.gpg"

            cp "$img" "$TARGET"
            if gpg -c "$TARGET"; then
                rm "$TARGET"
            else
                echo "‚ùå Failed to encrypt: $img"
            fi
        done

        echo "‚úÖ Images attached and encrypted."
        echo "üìå You can reference them in your journal like:"
        for img in "$@"; do
            FNAME="$DATE-$(basename "$img")"
            echo "![${FNAME}](images/${FNAME})"
        done
        exit 0
        ;;
    sync-up-all)
    rclone copy --filter "+ *.gpg" --filter "- *" --progress ~/journal/ "${JOURNAL_REMOTE:-gdrive:journal}/" || \
        echo "‚ö† Full upload failed."
    exit 0
    ;;

sync-down-all)
    rclone copy --filter "+ *.gpg" --filter "- *" --progress "${JOURNAL_REMOTE:-gdrive:journal}/" ~/journal/ || \
        echo "‚ö† Full download failed."
    exit 0
    ;;
    sync-up)
        if [ -f "$ENC_FILE" ]; then
            rclone copyto --no-traverse "$ENC_FILE" "$REMOTE_PATH" || \
                echo "‚ö† Upload failed ‚Äî will retry later."
        else
            echo "‚ùå No encrypted file found to upload: $ENC_FILE"
        fi
        exit 0
        ;;

    sync-down)
        rclone copyto --no-traverse "$REMOTE_PATH" "$ENC_FILE" || \
            echo "‚ö† Download failed or file not found on remote."
        exit 0
        ;;
    view)
        RENDERER="${JOURNAL_RENDERER:-glow}"

        if [ ! -f "$ENC_FILE" ]; then
            echo "‚ùå Encrypted journal not found: $ENC_FILE"
            exit 1
        fi

        # Decrypt journa
        PREVIEW_FILE="$PREVIEW_DIR/$DATE.md"
        mkdir -p "$(dirname "$PREVIEW_FILE")"
        if ! gpg --batch --yes -o "$PREVIEW_FILE" -d "$ENC_FILE"; then
            echo "‚ùå Failed to decrypt journal."
            exit 1
        fi

        shopt -s nullglob
        PREVIEW_IMG_DIR="$PREVIEW_DIR/images"
        mkdir -p "$PREVIEW_IMG_DIR"
        for img in "$IMG_DIR/$DATE-"*.gpg; do
            BASENAME=$(basename "$img" .gpg)
            gpg --batch --yes -o "$PREVIEW_IMG_DIR/$BASENAME" -d "$img" >/dev/null 2>&1
        done
        shopt -u nullglob

        # Try to run the renderer
        if eval "$RENDERER \"$PREVIEW_FILE\""; then
            echo "‚úÖ Rendered with: $RENDERER"
        else
            echo "‚ùå Failed to render using: $RENDERER"
        fi

        rm -rf "$PREVIEW_DIR"
        exit 0
        ;;

    *)
        # Normal edit mode
        if [ -f "$ENC_FILE" ]; then
            if ! gpg -o "$FILE" -d "$ENC_FILE"; then
                echo "‚ùå Decryption failed."
                exit 1
            fi
        else
            echo "# Journal - $DATE" > "$FILE"
        fi

        mkdir -p "$PREVIEW_DIR"
        shopt -s nullglob
        for enc in "$IMG_DIR/$DATE-"*.gpg; do
            BASENAME=$(basename "$enc" .gpg)
            OUT="$PREVIEW_DIR/$BASENAME"
            gpg --batch --yes -o "$OUT" -d "$enc" || echo "‚ö† Failed to decrypt $enc"
        done
        shopt -u nullglob
        ${EDITOR:-nano} "$FILE"

        if gpg -o "$TEMP_ENC_FILE" -c "$FILE"; then
            rm -f "$FILE"
            rm -f "$ENC_FILE"
            mv "$TEMP_ENC_FILE" "$ENC_FILE"

            rclone copyto --no-traverse "$ENC_FILE" "$REMOTE_PATH" || \
                echo "‚ö† Upload failed ‚Äî encrypted file is safe locally."
        else
            echo "‚ùå Encryption failed ‚Äî keeping decrypted file."
        fi

        if [ -d "$IMG_DIR" ]; then
            for img in "$IMG_DIR/$DATE-"*.gpg; do
                [ -e "$img" ] || continue  # skip if no files
                IMG_NAME=$(basename "$img")
                rclone copyto --no-traverse "$img" "$REMOTE_HOST/$YEAR/$MONTH/images/$IMG_NAME" || \
                    echo "‚ö† Failed to upload image: $IMG_NAME"
            done
        fi
        rm -rf "$PREVIEW_DIR"
        ;;
esac

